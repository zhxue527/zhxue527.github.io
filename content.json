{"pages":[{"title":"","text":"唐艺昕 李沁 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：Jensen 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"音乐歌单收藏","text":"--- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: clientId, clientSecret: clientSecret, id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}],"posts":[{"title":"Blog-Demo","text":"This is the blog quickStart Demo这是一个快速开始的blog演示","link":"/2020/04/05/Blog-Demo/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/05/hello-world/"},{"title":"01_Singleton 单例模式","text":"第一模式 Singleton-单例模式· 应用场景只需要一个实例：1、Factory2、Manager · 实现方式一、饿汗式 （常用) 1、优点 ①类加载到内存后，就实例化一个单例，JVM保证线程安全（一个类只加载一次)； ②简单实用，推荐使用； 2、缺点： ①不管是否用到，都会在类装载时完成实例化； ②无法防反序列； 3、实现代码： ① public class Singleton_01 { // 2定义一个静态的INSTANCE实例 private static final Singleton_01 INSTANCE = new Singleton_01(); // 1私有化默认构造方法 private Singleton_01 () {} // 3提供一个获取方法 public static Singleton_01 getInstance(){ return INSTANCE; } public void service() {} //测试是否为单例 public static void main(String[] args) { Singleton_01 s1 = Singleton_01.getInstance(); Singleton_01 s2 = Singleton_01.getInstance() System.out.println(s1 == s2); } } ② // 2定义一个静态的INSTANCE实例 private static final Singleton_01 INSTANCE = null; static { INSTANCE = new Singleton_01(); } 二、懒汗式： 1、优点：实现懒加载，只在使用时创建实例 2、缺点：无法防反序列 3、实现代码： ①一代（线程不安全）： public class Singleton_02 { // 1私有化默认构造方法 private Singleton_02() {} // 2定义一个静态的INSTANCE实例（volatile：性能调优） private static volatile Singleton_02 INSTANCE = null; // 3提供一个获取方法 public static Singleton_02 getInstance() { if (INSTANCE == null){ // try { // Thread.sleep(1); // } catch (InterruptedException e) { // e.printStackTrace(); // } INSTANCE = new Singleton_02(); } return INSTANCE; } public void service() {} public static void main(String[] args){ for(int i=0; i&lt;100; i++){ new Thread(()-&gt;{ System.out.println(Singleton_02.getInstance().hashCode()); }).start(); } } } ②二代（解决线程不安全，带来由于上锁导致的性能降低）： // 3提供一个获取方法 public static synchronized Singleton_02 getInstance() { if (INSTANCE == null){ // try { // Thread.sleep(1); // } catch (InterruptedException e) { // e.printStackTrace(); // } INSTANCE = new Singleton_02(); } return INSTANCE; } ③三代（解决线程不安全 及 上锁导致的性能降低）： // 3提供一个获取方法 public static Singleton_04 getInstance() { if (INSTANCE == null) { synchronized (Singleton_04.class){ if (INSTANCE == null){ // try { // Thread.sleep(1); // } catch (InterruptedException e) { // e.printStackTrace(); // } INSTANCE = new Singleton_04(); } } } return INSTANCE; } 三、静态内部类方式： 1、优点：线程安全（由JVM保证单例）、懒加载 2、缺点：无法防反序列 3、实现代码： public class Singleton_05 { // 1私有化默认构造方法 private Singleton_05() {} // 2通过静态内部类加载创建静态INSTANCE实例 private static class SingletonHolder { private final static Singleton_05 INSTANCE = new Singleton_05(); } // 3提供一个获取方法 public static Singleton_05 getInstance(){ return SingletonHolder.INSTANCE; } public void service() {} public static void main(String[] args) { for(int i=0; i&lt;100; i++){ new Thread(()-&gt;{ System.out.println(Singleton_05.getInstance().hashCode()); }).start(); } } } 四、枚举单例式： 1、优点： ①懒加载 ②线程安全 ③防反序列（枚举无构造方法） 2、缺点：别扭，不像一个类 3、实现代码：public enum Singleton_06 { //枚举单例 INSTANCE; //无构造方法 //本身无法修改，故可以按属性直接访问 public void service() {} public static void main(String[] args) { for(int i=0; i&lt;100; i++){ new Thread(()-&gt;{ System.out.println(Singleton_06.INSTANCE.hashCode()); }).start(); } } } ·图解单例模式","link":"/2020/04/05/01-Singleton-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"}],"tags":[],"categories":[]}